import React from 'react'\nimport { SmartAlbumRule } from '@/services/smartAlbums'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Switch } from '@/components/ui/switch'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Separator } from '@/components/ui/separator'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  Plus,\n  Trash,\n  Edit,\n  Lightbulb,\n  Check,\n  X,\n  Settings,\n  Sparkles,\n  Info\n} from '@phosphor-icons/react'\nimport { toast } from 'sonner'\n\ninterface SmartAlbumRulesManagerProps {\n  predefinedRules: SmartAlbumRule[]\n  customRules: SmartAlbumRule[]\n  suggestedRules: SmartAlbumRule[]\n  onCreateRule: (rule: Omit<SmartAlbumRule, 'id'>) => void\n  onUpdateRule: (ruleId: string, updates: Partial<SmartAlbumRule>) => void\n  onDeleteRule: (ruleId: string) => void\n  onAcceptSuggestion: (ruleId: string) => void\n  onRejectSuggestion: (ruleId: string) => void\n  onGenerateSuggestions: () => void\n}\n\ninterface RuleFormData {\n  name: string\n  description: string\n  type: SmartAlbumRule['type']\n  enabled: boolean\n  autoUpdate: boolean\n  color: string\n  icon: string\n}\n\nconst ruleTypeOptions = [\n  { value: 'ai-content', label: 'AI Content Analysis', description: 'Analyze photo content using AI' },\n  { value: 'metadata', label: 'Metadata Based', description: 'Use file size, dimensions, etc.' },\n  { value: 'pattern', label: 'Name/Path Pattern', description: 'Match filename or folder patterns' },\n  { value: 'temporal', label: 'Time Based', description: 'Group by date ranges' },\n  { value: 'location', label: 'Location Based', description: 'Group by location data' }\n]\n\nconst colorOptions = [\n  '#f59e0b', '#10b981', '#f97316', '#6366f1', '#ec4899',\n  '#8b5cf6', '#06b6d4', '#64748b', '#ef4444', '#22c55e'\n]\n\nconst iconOptions = [\n  'User', 'Tree', 'PartyPopper', 'Buildings', 'Clock',\n  'Star', 'Image', 'Monitor', 'Calendar', 'Folder'\n]\n\nexport function SmartAlbumRulesManager({\n  predefinedRules,\n  customRules,\n  suggestedRules,\n  onCreateRule,\n  onUpdateRule,\n  onDeleteRule,\n  onAcceptSuggestion,\n  onRejectSuggestion,\n  onGenerateSuggestions\n}: SmartAlbumRulesManagerProps) {\n  const [activeTab, setActiveTab] = React.useState('predefined')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = React.useState(false)\n  const [editingRule, setEditingRule] = React.useState<SmartAlbumRule | null>(null)\n  const [formData, setFormData] = React.useState<RuleFormData>({\n    name: '',\n    description: '',\n    type: 'ai-content',\n    enabled: true,\n    autoUpdate: true,\n    color: '#6366f1',\n    icon: 'Image'\n  })\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      type: 'ai-content',\n      enabled: true,\n      autoUpdate: true,\n      color: '#6366f1',\n      icon: 'Image'\n    })\n  }\n\n  const handleCreateRule = () => {\n    if (!formData.name.trim()) {\n      toast.error('Please enter a rule name')\n      return\n    }\n\n    const newRule: Omit<SmartAlbumRule, 'id'> = {\n      ...formData,\n      conditions: [] // Start with empty conditions, user can add them later\n    }\n\n    onCreateRule(newRule)\n    setIsCreateDialogOpen(false)\n    resetForm()\n  }\n\n  const handleUpdateRule = (rule: SmartAlbumRule, updates: Partial<SmartAlbumRule>) => {\n    onUpdateRule(rule.id, updates)\n  }\n\n  const handleEditRule = (rule: SmartAlbumRule) => {\n    setEditingRule(rule)\n    setFormData({\n      name: rule.name,\n      description: rule.description,\n      type: rule.type,\n      enabled: rule.enabled,\n      autoUpdate: rule.autoUpdate,\n      color: rule.color,\n      icon: rule.icon\n    })\n  }\n\n  const handleSaveEdit = () => {\n    if (!editingRule) return\n    \n    if (!formData.name.trim()) {\n      toast.error('Please enter a rule name')\n      return\n    }\n\n    handleUpdateRule(editingRule, formData)\n    setEditingRule(null)\n    resetForm()\n  }\n\n  const handleCancelEdit = () => {\n    setEditingRule(null)\n    resetForm()\n  }\n\n  const renderRuleCard = (rule: SmartAlbumRule, isCustom = false, isSuggested = false) => {\n    const isEditing = editingRule?.id === rule.id\n\n    return (\n      <Card key={rule.id} className={`group ${!rule.enabled ? 'opacity-60' : ''}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <div \n                className=\"p-2 rounded-lg flex items-center justify-center flex-shrink-0\"\n                style={{ backgroundColor: rule.color + '20', color: rule.color }}\n              >\n                <div className=\"w-4 h-4\" /> {/* Icon placeholder */}\n              </div>\n              \n              <div className=\"min-w-0 flex-1\">\n                {isEditing ? (\n                  <Input\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"font-medium\"\n                    placeholder=\"Rule name\"\n                  />\n                ) : (\n                  <div>\n                    <CardTitle className=\"text-base truncate\">{rule.name}</CardTitle>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {rule.type.replace('-', ' ')}\n                      </Badge>\n                      {!rule.enabled && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Disabled\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              {isSuggested ? (\n                <div className=\"flex items-center gap-1\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\" \n                    onClick={() => onAcceptSuggestion(rule.id)}\n                    className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                  >\n                    <Check className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\" \n                    onClick={() => onRejectSuggestion(rule.id)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ) : (\n                <>\n                  {isCustom && (\n                    <Button \n                      size=\"sm\" \n                      variant=\"ghost\" \n                      onClick={() => handleEditRule(rule)}\n                      disabled={isEditing}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  \n                  {!isEditing && (\n                    <Switch\n                      checked={rule.enabled}\n                      onCheckedChange={(checked) => handleUpdateRule(rule, { enabled: checked })}\n                    />\n                  )}\n                  \n                  {isCustom && (\n                    <Button \n                      size=\"sm\" \n                      variant=\"ghost\" \n                      onClick={() => onDeleteRule(rule.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"pt-0\">\n          <div className=\"space-y-3\">\n            {isEditing ? (\n              <div className=\"space-y-3\">\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe what this rule does\"\n                    rows={2}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"type\">Type</Label>\n                    <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value as SmartAlbumRule['type'] }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ruleTypeOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"color\">Color</Label>\n                    <Select value={formData.color} onValueChange={(value) => setFormData(prev => ({ ...prev, color: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {colorOptions.map((color) => (\n                          <SelectItem key={color} value={color}>\n                            <div className=\"flex items-center gap-2\">\n                              <div \n                                className=\"w-3 h-3 rounded-full\" \n                                style={{ backgroundColor: color }} \n                              />\n                              {color}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        id=\"enabled\"\n                        checked={formData.enabled}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enabled: checked }))}\n                      />\n                      <Label htmlFor=\"enabled\">Enabled</Label>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        id=\"autoUpdate\"\n                        checked={formData.autoUpdate}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, autoUpdate: checked }))}\n                      />\n                      <Label htmlFor=\"autoUpdate\">Auto-update</Label>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={handleCancelEdit}>\n                      Cancel\n                    </Button>\n                    <Button size=\"sm\" onClick={handleSaveEdit}>\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <CardDescription className=\"text-sm\">\n                  {rule.description}\n                </CardDescription>\n                \n                {rule.conditions.length > 0 && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    {rule.conditions.length} condition{rule.conditions.length !== 1 ? 's' : ''}\n                  </div>\n                )}\n                \n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span>Auto-update: {rule.autoUpdate ? 'On' : 'Off'}</span>\n                  {isSuggested && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <Lightbulb className=\"h-3 w-3 mr-1\" />\n                      Suggested\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold flex items-center gap-2\">\n            <Settings className=\"h-6 w-6\" />\n            Smart Album Rules\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Manage how smart albums are created and organized\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" onClick={onGenerateSuggestions}>\n            <Lightbulb className=\"h-4 w-4 mr-2\" />\n            Get Suggestions\n          </Button>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Rule\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Smart Album Rule</DialogTitle>\n                <DialogDescription>\n                  Define a new rule for automatically organizing photos into smart albums.\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., My Vacation Photos\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe what this rule does\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Rule Type</Label>\n                  <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value as SmartAlbumRule['type'] }))}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {ruleTypeOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          <div>\n                            <div className=\"font-medium\">{option.label}</div>\n                            <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"color\">Color</Label>\n                    <Select value={formData.color} onValueChange={(value) => setFormData(prev => ({ ...prev, color: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {colorOptions.map((color) => (\n                          <SelectItem key={color} value={color}>\n                            <div className=\"flex items-center gap-2\">\n                              <div \n                                className=\"w-3 h-3 rounded-full\" \n                                style={{ backgroundColor: color }} \n                              />\n                              {color}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"icon\">Icon</Label>\n                    <Select value={formData.icon} onValueChange={(value) => setFormData(prev => ({ ...prev, icon: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {iconOptions.map((icon) => (\n                          <SelectItem key={icon} value={icon}>\n                            {icon}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        id=\"enabled\"\n                        checked={formData.enabled}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enabled: checked }))}\n                      />\n                      <Label htmlFor=\"enabled\">Enabled</Label>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        id=\"autoUpdate\"\n                        checked={formData.autoUpdate}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, autoUpdate: checked }))}\n                      />\n                      <Label htmlFor=\"autoUpdate\">Auto-update</Label>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-end gap-2 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleCreateRule}>\n                    Create Rule\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"predefined\">\n            Predefined ({predefinedRules.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"custom\">\n            Custom ({customRules.length})\n          </TabsTrigger>\n          {suggestedRules.length > 0 && (\n            <TabsTrigger value=\"suggested\" className=\"relative\">\n              Suggested ({suggestedRules.length})\n              <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-primary rounded-full\" />\n            </TabsTrigger>\n          )}\n        </TabsList>\n        \n        <TabsContent value=\"predefined\" className=\"space-y-4\">\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              These are built-in smart album rules. You can enable or disable them, but you cannot edit or delete them.\n            </AlertDescription>\n          </Alert>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {predefinedRules.map((rule) => renderRuleCard(rule, false, false))}\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"custom\" className=\"space-y-4\">\n          {customRules.length === 0 ? (\n            <Card className=\"p-12 text-center\">\n              <div className=\"space-y-4\">\n                <div className=\"mx-auto w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <Sparkles className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-medium\">No Custom Rules Yet</h3>\n                  <p className=\"text-muted-foreground\">\n                    Create custom smart album rules to organize photos based on your specific needs.\n                  </p>\n                </div>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Rule\n                </Button>\n              </div>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              {customRules.map((rule) => renderRuleCard(rule, true, false))}\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"suggested\" className=\"space-y-4\">\n          {suggestedRules.length === 0 ? (\n            <Card className=\"p-12 text-center\">\n              <div className=\"space-y-4\">\n                <div className=\"mx-auto w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center\">\n                  <Lightbulb className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-medium\">No Suggestions Available</h3>\n                  <p className=\"text-muted-foreground\">\n                    We'll analyze your photo collection and suggest smart album rules based on patterns we find.\n                  </p>\n                </div>\n                <Button onClick={onGenerateSuggestions}>\n                  <Lightbulb className=\"h-4 w-4 mr-2\" />\n                  Generate Suggestions\n                </Button>\n              </div>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              <Alert>\n                <Lightbulb className=\"h-4 w-4\" />\n                <AlertDescription>\n                  These rules are suggested based on patterns in your photo collection. Accept the ones you like or dismiss them.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {suggestedRules.map((rule) => renderRuleCard(rule, false, true))}\n              </div>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}